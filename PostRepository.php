<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
	public function getPostByInterestsAndBrands($interests = array(), $brands = array(), $limit = 999, $offset = 0)
	{
		$qb = $this->createQueryBuilder('post');

		// add joins
		$qb

			->join('post.brand', 'brand');

		// where
		if (!empty($interests) && !empty($brands)) {
			$qb->where($qb->expr()->in('post.interest', $interests));
			$qb->orWhere($qb->expr()->in('brand.id', $brands));
		} else if (!empty($interests)) {
			$qb->where($qb->expr()->in('post.interest', $interests));
		} else if (!empty($brands)) {
			$qb->where($qb->expr()->in('brand.id', $brands));
		}

		// order
		$qb->orderBy('post.created_at', 'desc');

		// offset
		$qb->setFirstResult($offset);

		// limit
		$qb->setMaxResults($limit);

		return $qb->getQuery()->getResult();
	}

	public function findPostsByHashTag($hashtag, $limit = 999, $offset = 0)
	{
		$qb = $this->createQueryBuilder('post');

		// add joins
		$qb->join('post.brand', 'brand');

		// where
		$qb->where($qb->expr()->orX(
			$qb->expr()->like('brand.brand_label', ':hashtag'),
			$qb->expr()->like('post.tags', ':hashtag')
		));

		// param
		$qb->setParameter('hashtag', '%' . $hashtag . '%');

		// order
		$qb->orderBy('post.created_at', 'desc');

		// offset
		$qb->setFirstResult($offset);

		// limit
		$qb->setMaxResults($limit);

		return $qb->getQuery()->getResult();
	}

	public function findPostsByQuery($query, $limit = 999, $offset = 0)
	{
		$query = preg_replace('/[\ \-\_\*]+/', '%', $query);

		$qb = $this->createQueryBuilder('post');

		// add joins
		$qb
			->join('post.brand', 'brand')
			->join('brand.interest', 'interest');

		// where
		$qb->where($qb->expr()->orX(

			$qb->expr()->like('brand.brand_label', ':query'),
			$qb->expr()->like('interest.label', ':query'),
			$qb->expr()->like('post.title', ':query'),
			$qb->expr()->like('post.content', ':query'),
			$qb->expr()->like('post.url', ':query'),
			$qb->expr()->like('post.tags', ':query')
			
		));

		// param
		$qb->setParameter('query', '%' . $query . '%');

		// order
		$qb->orderBy('post.created_at', 'desc');

		// offset
		$qb->setFirstResult($offset);

		// limit
		$qb->setMaxResults($limit);

		return $qb->getQuery()->getResult();
	}

	public function findPopularPosts($limit = 999, $offset = 0)
	{
		$qb = $this->createQueryBuilder('post')
			->join('post.brand', 'brand')
			->join('brand.country', 'country')
			->where('country.code = :code')
			->setParameter('code', 'CH')
			->orderBy('post.created_at', 'desc')
			->setFirstResult($offset)
			->setMaxResults($limit);

		return $qb->getQuery()->getResult();
	}
}